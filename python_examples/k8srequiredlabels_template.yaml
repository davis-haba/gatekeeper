apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8srequiredlabels
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            message:
              type: string
            labels:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  allowedRegex:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        import sys
        import json
        import re

        def main():
          obj_str = sys.argv[1]
          param_str = sys.argv[2]

          obj = json.loads(obj_str)
          params = json.loads(param_str)

          labels = obj.get("metadata", {}).get("labels", {})

          for label in params.get("labels", []):
            if label["key"] not in labels:
              print("%s is missing from labels %s" % (label["key"], labels), end="")
              return
            
            if "allowedRegex" in label and not re.match(label["allowedRegex"], labels[label["key"]]):
              print("value %s of label %s does not match required regex %s" % (labels[label["key"]], label["key"], label["allowedRegex"]), end="")
              return
        
        if __name__ == "__main__":
          main()
